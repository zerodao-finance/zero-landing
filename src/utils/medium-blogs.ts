import { IBlogDataProps } from '../types/Blogs';

export const BLOGS: Array<IBlogDataProps> = [
  {
    id: 1,
    title: 'zeroDAO — P2P Cross-chain',
    pubDate: '2022-06-21 13:34:24',
    author: 'flex',
    thumbnail: 'https://i.ibb.co/YTL4c4b/p2p-cross-chain-min.jpg',
    guid: 'https://medium.com/p/8ecc1e8b2c9a',
    link: 'https://medium.com/@kungfuflex/zerodao-p2p-cross-chain-8ecc1e8b2c9a?source=rss-f43db6eeea07------2',
    description: `\n<h3>zeroDAO — P2P Cross-chain</h3>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*U8DUaUngXzCYGRNjQdTFhQ.png\"></figure><p>It’s been a tumultuous year in the cross-chain scene. The highest-value exploits in the history of the blockchain industry have occurred very recently, involving popular bridge applications. As a result, the L0 application space has acquired a certain stigma. Many bridge protocols by design can be large honeypots that are very attractive to potential attackers.</p>\n<p>Let’s face it, cross-chain is hard, and there is no magic bullet. But, that is exactly the type of problem that myself and the others at zeroDAO thrive on. We can’t use a magic bullet, because we don’t know magic, but the software we’ve developed is approaching an even higher caliber.</p>\n<p>The cross-chain SDK we wanted to create, we needed to satisfy the following requirements:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*M9qbpGhiGp2zcm8CjZeaZw.png\"></figure><ol>\n<li>Usability. An application user should not need to hold a balance of the native asset on the network to which they are bridging. They are bridging because they DON’T have that asset.</li>\n<li>Privacy. We should be able to bridge BTC (or any other supported asset) to ETH to create a new identity on DeFi, one that is not easy to correlate to a source of funds.</li>\n<li>Decentralization. There must be no point of failure or any single trusted party. In L0, it would simply fail, or become untrustworthy.</li>\n</ol>\n<p>The solution took nearly a year to build and test, but it is now available at the following location:</p>\n<p><a href=\"https://github.com/zerodao-finance/zero-protocol\">GitHub - zerodao-finance/zero-protocol</a></p>\n<p>The zeroDAO SDK leverages the most reliable tech we could apply to the L0 problem. It makes heavy use of the P2P networking stack published by Protocol Labs, the same one that makes IPFS work: libp2p. The JavaScript implementation of the libp2p framework is not widely used at the time of this writing, with only about 50 projects on GitHub utilizing the Libp2p constructor. We built zerop2p using the very recent WebRTC transports in js-libp2p, the NOISE algorithm for end-to-end encryption of messages, and GossipSub for a modern pubsub algorithm, allowing for zerop2p keepers to advertise their presence.</p>\n<p>As a bridge transport, we elected to use RenVM to secure Bitcoin transfers, being one of the only solutions we found which was safe to build BTC &lt;-&gt; ETH on top of. For the transport of XMR &lt;-&gt; ETH and DOT &lt;-&gt; ETH, we are working with a newer private team that has developed similar libraries for threshold signing via sMPC, compatible with the underlying cryptographic curve for those assets.</p>\n<p>Our flagship application is available at the following page:</p>\n<p><a href=\"https://bridge.zerodao.com/\">zeroBRIDGE</a></p>\n<p>Users can currently bridge BTC directly to ETH, WBTC, or USDC, on various EVM compatible networks, including Arbitrum and Avalanche. We will soon release support for Polygon, BSC, and Fantom. The EVM backend that settles bridged trades on each respective network uses an optimal routing scheme maintained by the DAO, and in times of volatility we have often seen positive slippage, in fact. As a defensive measure, slippage controls are signed along with the user’s intent to bridge, and the zerop2p keepers use the new Alchemy API integration with flashbots (eth_sendPrivateTransaction) to otherwise prevent frontrunning. It is safe to move a large volume of capital through the bridge, without the looming threat of devp2p and “the dark forest.”</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*X8fVyEZab21CFzNTZAQq-g.png\"></figure><p>For bridging from EVM-based assets back to BTC, the zeroDAO SDK has a unique mechanism. For readers who have ever traded USDC for another asset, you have clicked the “Allow the Uniswap Protocol to use your USDC” button, which prompts the user’s wallet to sign an EIP712 message, in lieu of making an ERC20#approve(address, uint256)transaction prior to sending the actual trade transaction that performs the swap. The extension to ERC20 which allows for this EIP712 message to be used instead of an approval transaction is known as ERC20Permit.</p>\n<p>For a protocol like zeroDAO where the burden is on the keepers to send a transaction instead of the end-user, we have found an alternative way to use the EIP712 message of ERC20Permit, enabling an arbitrary number of additional parameters (bridge destination address/slippage tolerance), by hashing them all into the deadline parameter of the ERC20Permit message, along with our own deadline parameter we can validate ourselves. Since a 256-bit hash will always exceed a realistic UNIX timestamp (with a negligible chance of failure), we can reuse the deadline parameter any way we want, and enable bridging ERC20Permit enabled assets to BTC or other networks with only a single EIP712 signed message from the user’s browser, encrypted and broadcast over zerop2p to a keeper. It is a curious sight, to examine the Etherscan readout for an address which has been funded with USDC, but only used to bridge that same USDC to BTC. There is no transaction history in the ledger, and even go-ethereum will not create an account record in the state trie for this wallet.</p>\n<p>To date, we have seen about 38 BTC worth of volume across the bridge, and on the day this article is written, we have seen a &gt;$200k value trade handled by a keeper. As we build, we seek to continuously direct more cross-chain flow through the zeroDAO SDK, and begin to repair perceptions and trust around bridging as a community.</p>\n<p>Be sure to follow us on Twitter:</p>\n<p><a href=\"https://twitter.com/@zerodaoHQ\">JavaScript is not available.</a></p>\n<p>Check out our repositories at:</p>\n<ul>\n<li><a href=\"https://github.com/zerodao-finance/zero-protocol\">GitHub - zerodao-finance/zero-protocol</a></li>\n<li><a href=\"https://github.com/zerodao-finance/zeroBRIDGE\">GitHub - zerodao-finance/zeroBRIDGE: Arbitrum React application</a></li>\n<li><a href=\"https://github.com/zerodao-finance/zero-keeper\">GitHub - zerodao-finance/zero-keeper: zeroDAO keeper redis backed kubernetes deployment</a></li>\n</ul>\n<p>And, if nothing else, please register on our newly launched Matrix instance and join the cross-chain renaissance. We are a community of engineers, privacy-heads, and working to earn the label of “multichain maximalists” — Imagine that!</p>\n<p>To use Matrix, download Element Secure Messenger, available on all platforms, and register a handle. For a limited time, we have left registrations open on our self-hosted Custom Homeserver at matrix.zerodao.gg</p>\n<p>Visiting in a browser will only show the zeroDAO logo. Prospective registrants must use Element to connect. The zeroDAO public channel is accessible at:</p>\n<p>#general:matrix.zerodao.gg</p>\n<p>Thank you for reading, and may your bridging always be true.</p>\n<p>— flex</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=8ecc1e8b2c9a\" width=\"1\" height=\"1\" alt=\"\">\n`,
  },
  // {
  //   id: 2,
  //   title: '10 Minutes or Less: Cash out USDC to Debit Card Easy',
  //   pubDate: '2022-05-25 20:09:34',
  //   author: 'Famous Doctrine',
  //   thumbnail: '/assets/images/blog/10-min-or-less-min.jpeg',
  //   guid: 'https://medium.com/p/4f8a34f7819a',
  //   link: 'https://medium.com/@famousdoctrine000/10-minutes-or-less-cash-out-usdc-to-debit-card-easy-4f8a34f7819a?source=rss-42830db432a2------2',
  //   description: `\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/0*QiYemLQE7hriXlIF\"><figcaption>Photo by <a href=\"https://unsplash.com/@techdailyca?utm_source=medium&amp;utm_medium=referral\">Tech Daily</a> on <a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\">Unsplash</a></figcaption></figure><p>If you’re like me, then you have a portion of your funds stored in crypto. Currently I keep the majority of my assets in USDC and, for me, the most inconvenient part of this is accessing my funds easily and using it to pay for my daily needs.</p>\n<p>Recently I began following the team at zeroDAO on Twitter and their new bridge at bridge.zerodao.com. This bridge can swap from BTC into ETH/USDC/WBTC/renBTC, or vice versa, quickly without needing ETH for gas fees.</p>\n<ul>\n<li><a href=\"https://bridge.zerodao.com/\">zeroBRIDGE</a></li>\n<li><a href=\"https://twitter.com/zerodaohq\">JavaScript is not available.</a></li>\n</ul>\n<p>As this product is the most convenient tool for me at the moment, I have decided to create a step-by-step guide to help walk you through the process of creating a Cash App account, verifying your identity, and then sending your crypto to your new Cash App account using zeroDAO’s easy-to-use bridge.</p>\n<a href=\"https://medium.com/media/35bed4342345be1a862ff88880c48811/href\">https://medium.com/media/35bed4342345be1a862ff88880c48811/href</a><p>After running through all of this the first time, the process is as easy as copying your cash app address, putting it through bridge.zerodao.com and then sending your wallet’s funds directly to it for use in your day to day life.</p>\n<p>Written by FamousDoctrine — a Community Member</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=4f8a34f7819a\" width=\"1\" height=\"1\" alt=\"\">\n`,
  // },
];
